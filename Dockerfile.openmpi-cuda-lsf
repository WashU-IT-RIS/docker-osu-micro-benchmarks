ARG OS_VERSION="20.04"
ARG CUDA_VERSION="11.6.0"
FROM nvidia/cuda:${CUDA_VERSION}-devel-ubuntu${OS_VERSION}

LABEL maintainer="sleong@wustl.edu"

# Setup LSF link libraries
COPY lsf/ /opt/ibm/lsfsuite/lsf/10.1/

RUN export DEBIAN_FRONTEND=noninteractive && apt-get update && \
    apt-get install -y \
    autoconf \
    automake \
    autotools-dev \
    bison \
    chrpath \
    debhelper \
    dpatch \
    ethtool \
    flex \
    gfortran \
    git \
    graphviz \
    iproute2 \
    kmod \
    libelf1 \
    libfind-lib-perl \
    libgfortran4 \
    libglib2.0-0 \
    libltdl-dev \
    libmnl0 \
    libnl-3-200 \
    libnl-route-3-200 \
    libnuma1 \
    libnuma-dev \
    libssl1.1 \
    lsb-release \
    lsof \
    m4 \
    net-tools \
    pciutils \
    pkg-config \
    python \
    swig \
    tcl \
    tk \
    tk8.6 \
    tzdata \
    libfuse2 python udev libnl-3-dev libnl-route-3-dev libusb-1.0-0 \
    wget && \
    apt-get clean all

# Set MOFED version, OS version and platform
ENV MOFED_VERSION 5.4-3.1.0.0
ENV OS_VERSION ubuntu20.04
ENV PLATFORM x86_64

RUN wget -q http://content.mellanox.com/ofed/MLNX_OFED-${MOFED_VERSION}/MLNX_OFED_LINUX-${MOFED_VERSION}-${OS_VERSION}-${PLATFORM}.tgz && \
    tar -xvf MLNX_OFED_LINUX-${MOFED_VERSION}-${OS_VERSION}-${PLATFORM}.tgz && \
    MLNX_OFED_LINUX-${MOFED_VERSION}-${OS_VERSION}-${PLATFORM}/mlnxofedinstall --user-space-only --without-fw-update  --with-neohost-backend -q && \
    cd .. && \
    rm -rf ${MOFED_DIR} && \
    rm -rf *.tgz



# Install package dependencies
RUN apt-get update -qq \
      && apt-get -y --no-install-recommends install \
         build-essential \
         ca-certificates \
         gdb \
         gfortran \
         wget \
      && apt-get clean all \
      && rm -r /var/lib/apt/lists/*


# Build OPENMPI

ARG MPI_VERSION="4.0.2"
ARG MPI_CONFIGURE_OPTIONS="--enable-fast=all,O3 --prefix=/usr --with-cuda=/usr/local/cuda --with-lsf=/opt/ibm/lsfsuite/lsf/10.1/ --enable-orterun-prefix-by-default --with-lsf-libdir=/opt/ibm/lsfsuite/lsf/10.1/linux2.6-glibc2.3-x86_64/lib/ --with-ucx=/usr --enable-mca-no-build=btl-uct"
ARG MPI_MAKE_OPTIONS="-j4"
COPY ./0001-OPAL-MCA-BTL-OPENIB-Detect-ConnectX-6-HCAs.patch /tmp/
RUN mkdir -p /tmp/openmpi-build \
      && cd /tmp/openmpi-build \
      && MPI_VER_MM="${MPI_VERSION%.*}" \
      && wget http://www.openmpi.org/software/ompi/v${MPI_VER_MM}/downloads/openmpi-${MPI_VERSION}.tar.bz2 \
      && tar xjf openmpi-${MPI_VERSION}.tar.bz2 \
      && cd openmpi-${MPI_VERSION}  \
      && patch -p1 -i /tmp/0001-OPAL-MCA-BTL-OPENIB-Detect-ConnectX-6-HCAs.patch \
      && ./configure ${MPI_CONFIGURE_OPTIONS} \
      && make ${MPI_MAKE_OPTIONS} \
      && make install \
      && ldconfig \
      && cd / \
      && rm -rf /tmp/openmpi-build


# Build OSU Benchmarks

ARG OSU_VERSION="5.6.3"
ARG OSU_CONFIGURE_OPTIONS="--prefix=/usr/local CC=mpicc CXX=mpicxx CFLAGS=-O3 --enable-cuda --with-cuda=/usr/local/cuda"
ARG OSU_MAKE_OPTIONS="-j4"

RUN mkdir -p /tmp/osu-benchmark-build \
      && cd /tmp/osu-benchmark-build \
      && wget http://mvapich.cse.ohio-state.edu/download/mvapich/osu-micro-benchmarks-${OSU_VERSION}.tar.gz \
      && tar xzvf osu-micro-benchmarks-${OSU_VERSION}.tar.gz \
      && cd osu-micro-benchmarks-${OSU_VERSION} \
      && ./configure ${OSU_CONFIGURE_OPTIONS} \
      && make ${OSU_MAKE_OPTIONS} \
      && make install \
      && cd / \
      && rm -rf /tmp/osu-benchmark-build
ENV PATH="/usr/local/libexec/osu-micro-benchmarks/mpi/collective:/usr/local/libexec/osu-micro-benchmarks/mpi/one-sided:/usr/local/libexec/osu-micro-benchmarks/mpi/pt2pt:/usr/local/libexec/osu-micro-benchmarks/mpi/startup:$PATH"


# Some uesful Linux utilities
RUN apt-get update -qq \
      && apt-get -y --no-install-recommends install patchelf strace ltrace \
      && apt-get clean all \
      && rm -r /var/lib/apt/lists/*


# Final settings
WORKDIR /
CMD ["/bin/bash"]

